// Priority Queue:

// A priority queue is a container adaptor that works like a heap — elements are arranged so that the largest (by default) element is always at the top.
// It is implemented internally using a max heap by default (uses std::vector as the underlying container).

// Header:
// #include <queue>

// Key Operations:
// Function	Description
// push(x)	Insert element x
// pop()	Remove the top element
// top()	Access the top element
// empty()	Check if empty
// size()	Number of elements
// Time Complexity:

// Insertion and deletion — O(log n)
// Accessing top — O(1)

#include <iostream>
#include <queue>
using namespace std;

void example_priority_queue_max() {
    priority_queue<int> pq;

    pq.push(10);
    pq.push(5);
    pq.push(20);
    pq.push(15);

    cout << "Priority Queue (Max Heap): ";
    while (!pq.empty()) {
        cout << pq.top() << " ";
        pq.pop();
    }
    cout << endl;
}

//min heap
void example_priority_queue_min() {
    priority_queue<int, vector<int>, greater<int>> pq;

    pq.push(10);
    pq.push(5);
    pq.push(20);
    pq.push(15);

    cout << "Priority Queue (Min Heap): ";
    while (!pq.empty()) {
        cout << pq.top() << " ";
        pq.pop();
    }
    cout << endl;
}
