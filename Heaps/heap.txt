HEAPS:

heap hamara ek DS hai w/c is a complete binary tree and comes with heap order property

BT:
Each node can have at most 2 children (left and right).

CBT:
All levels are completely filled except possibly the last.
In the last level, nodes are filled from left to right (lean towards left).


HEAP ORDER PROPERTY:
MAX heap:
child node<parent node

MIN heap:
child node>parent node

INSERTION:

For 1 based indexing:
Node-> i;
lc-> 2*i;
rc-> 2*i+1;
p-> i/2;

For 0 based indexing:
Node-> i;
lc-> 2*i+1;
rc-> 2*i+2;
p-> i/2;

Insertion Algorithm:

Insert the element at the end (bottom-most, leftmost position).
Heapify Up → Compare with the parent and swap if the heap property is violated.
Continue until the correct position is found.

TC:
O(log n) — because height of a heap is log n.

Deletion Algorithm:

Swap the root element with the last element -> O(1)
Then remove last element -> O(1)
Then apply heap property -> O(log n)

TC:
O(log n)

Heapify Algorithm:

convert arr into heap
CBT: (n/2+1) to n all need not be processed as they all are leaf nodes and are heap already as there is nothing to compare it with
all nodes from 1 to n/2 need to be processed
heapify(arr,n,i) loop -> O(n)
whole heapify function -> O(arr,n,i)

Time Complexity:
O(n)+O(log n)



