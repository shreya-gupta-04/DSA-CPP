⚙️ 3. CONTAINER ADAPTORS
3.1 Stack
Description

Follows LIFO (Last In First Out) principle.
Built using deque by default.

Header:

#include <stack>

Function	Description	Time
push(x)	    Add element	O(1)
pop()	    Remove top	O(1)
top()	    Access top	O(1)
empty()	    Check empty	O(1)
size()	    Size	    O(1)

Example
#include <iostream>
#include <stack>
using namespace std;

void example_stack() {
    stack<int> st;
    st.push(10); st.push(20); st.push(30);

    cout << "Top: " << st.top() << endl;
    st.pop();

    cout << "Stack after pop: ";
    while (!st.empty()) {
        cout << st.top() << " ";
        st.pop();
    }
    cout << endl;
}

3.2 Queue
Description

Follows FIFO (First In First Out).
Built using deque.

Header:

#include <queue>

Function	      Description	        Time
push(x)	           Enqueue	            O(1)
pop()	           Dequeue	            O(1)
front()	           Access front	        O(1)
back()	           Access last	        O(1)
empty() / size()   Info	                O(1)

Example
#include <iostream>
#include <queue>
using namespace std;

void example_queue() {
    queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    cout << "Front: " << q.front() << ", Back: " << q.back() << endl;

    q.pop();
    cout << "After pop, Front: " << q.front() << endl;
}