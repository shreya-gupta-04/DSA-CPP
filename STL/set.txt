2.1 Set
Description

Stores unique and sorted elements (by default ascending).
Implemented using a balanced BST (Red-Black Tree).

Header:

#include <set>

Functions
Function	    Description	                       Time
insert(x)	    Add element	                       O(log n)
erase(x)	    Remove	                           O(log n)
find(x)	        Search	                           O(log n)
count(x)	    Returns 0 or 1	                   O(log n)
lower_bound(x)	First element â‰¥ x.             Â    O(log n)
upper_bound(x)	First element > x.             Â    O(log n)
begin(), end()	Iterators	                   Â    O(1)

Example
#include <iostream>
#include <set>
using namespace std;

void example_set() {
    set<int> s = {1, 3, 5};
    s.insert(2);
    s.insert(3); // ignored (duplicate)

    cout << "Set: ";
    for (int x : s) cout << x << " ";
    cout << endl;

    auto it = s.find(3);
    if (it != s.end()) s.erase(it);

    cout << "After erase: ";
    for (int x : s) cout << x << " ";
    cout << endl;
}

2.2 Multiset

Same as set but allows duplicate elements.
All complexities same as set.

#include <iostream>
#include <set>
using namespace std;

void example_multiset() {
    multiset<int> ms = {1, 2, 2, 3};
    ms.insert(2);

    cout << "Multiset: ";
    for (int x : ms) cout << x << " ";
    cout << "\nCount of 2: " << ms.count(2) << endl;
}


ðŸ§® UNORDERED_SET
An unordered_set is an unordered associative container that stores unique elements using hashing.
Unlike set, elements are not sorted â€” operations are performed using hash tables, leading to average O(1) lookup and insertion.

Header:
#include <unordered_set>

Key Characteristics

Elements are unique.

No defined order.

Uses hashing, not binary search tree.

Faster than set for most cases (average O(1) operations).

Common Functions
Function	          Description	                      Time Complexity
insert(x)	          Inserts element x	                       O(1) avg
erase(x)	          Removes element x	                       O(1) avg
find(x)	              Returns iterator to x if found	       O(1) avg
count(x)	          Returns 1 if element exists, else 0	   O(1)
size()	              Returns number of elements	           O(1)
clear()	              Removes all elements	                   O(n)
begin(), end()	      Iterator access	                       O(1)
empty()	              Checks if container is empty	           O(1)
bucket_count()	      Returns number of buckets	               O(1)


Example
#include <iostream>
#include <unordered_set>
using namespace std;

void example_unordered_set() {
    unordered_set<int> s;

    s.insert(5);
    s.insert(10);
    s.insert(3);
    s.insert(5);  // Duplicate ignored

    cout << "Elements: ";
    for (auto x : s)
        cout << x << " ";
    cout << endl;

    // Find
    if (s.find(10) != s.end())
        cout << "10 found\n";

    // Erase
    s.erase(3);

    // Size and existence
    cout << "Size: " << s.size() << endl;
    cout << "Contains 5? " << (s.count(5) ? "Yes" : "No") << endl;
}

Time Complexity
Operation	Average Case	Worst Case
Erase	    O(1)	Â Â Â Â Â Â Â Â Â O(n)
Insert	    O(1)	Â Â Â Â Â Â Â Â Â O(n)
Find	    O(1)	Â Â Â Â Â Â Â Â Â O(n)
Traverse	O(n)	Â Â Â Â Â Â Â Â Â O(n)